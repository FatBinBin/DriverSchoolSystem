<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bin.design.drivingschool.mapper.DssCoachInfoMapper">
  <resultMap id="BaseResultMap" type="com.bin.design.drivingschool.entity.DssCoachInfo">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="ID" jdbcType="INTEGER" property="id" />
    <result column="COACH_NAME" jdbcType="VARCHAR" property="coachName" />
    <result column="COACH_SEX" jdbcType="BIT" property="coachSex" />
    <result column="COACH_IDCAR" jdbcType="VARCHAR" property="coachIdcar"/>
    <result column="COACH_YEAR" jdbcType="INTEGER" property="coachYear" />
    <result column="COACH_PHONE" jdbcType="VARCHAR" property="coachPhone" />
    <result column="COACH_INTRO" jdbcType="VARCHAR" property="coachIntro" />
    <result column="COACH_IMG" jdbcType="BLOB" property="coachImg" />
    <result column="ORDER_COUNT" jdbcType="INTEGER" property="orderCount" />
    <result column="TEACH_YEAR" jdbcType="INTEGER" property="teachYear" />
  </resultMap>
  <sql id="Base_Column_List">
    ID, COACH_NAME, COACH_SEX,COACH_IDCAR, COACH_YEAR, COACH_PHONE, COACH_INTRO, COACH_IMG, ORDER_COUNT, TEACH_YEAR
  </sql>
  <select id="selectAll" resultType="map">
    <!--select-->
    <!--<include refid="Base_Column_List"/>-->
    <!--from dss_coach_info-->
    select ci.ID id, ci.COACH_IMG coachImg, ci.COACH_NAME coachName, ci.COACH_SEX coachSex, ci.COACH_PHONE coachPhone,
    ci.COACH_IDCAR coachIdcar,ci.COACH_INTRO coachIntro, ci.COACH_YEAR coachYear, ci.TEACH_YEAR teachYear,
    count(li.ID) num
    from dss_coach_info ci
    left join dss_learner_info li on ci.ID = li.COACH_ID
    group by ci.ID
  </select>
  <select id="selectByKey" resultType="map">
    <!--select-->
    <!--<include refid="Base_Column_List"/>-->
    <!--from dss_coach_info-->
    select ci.ID id, ci.COACH_IMG coachImg, ci.COACH_NAME coachName, ci.COACH_SEX coachSex, ci.COACH_PHONE coachPhone,
    ci.COACH_IDCAR coachIdcar,ci.COACH_INTRO coachIntro, ci.COACH_YEAR coachYear, ci.TEACH_YEAR teachYear,
    count(li.ID) num
    from dss_coach_info ci
    left join dss_learner_info li on ci.ID = li.COACH_ID
    where ci.COACH_NAME like CONCAT(CONCAT('%',#{key,jdbcType=VARCHAR}),'%')
    or ci.COACH_IDCAR like CONCAT(CONCAT('%',#{key,jdbcType=VARCHAR}),'%')
    or ci.COACH_PHONE like CONCAT(CONCAT('%',#{key,jdbcType=VARCHAR}),'%')
    group by ci.ID
  </select>
  <select id="selectByName" resultType="map">
    <!--select-->
    <!--<include refid="Base_Column_List"/>-->
    <!--from dss_coach_info-->
    select ci.ID id, ci.COACH_IMG coachImg, ci.COACH_NAME coachName, ci.COACH_SEX coachSex, ci.COACH_PHONE coachPhone,
    ci.COACH_IDCAR coachIdcar,ci.COACH_INTRO coachIntro, ci.COACH_YEAR coachYear, ci.TEACH_YEAR teachYear,
    count(li.ID) num
    from dss_coach_info ci
    left join dss_learner_info li on ci.ID = li.COACH_ID
    where ci.COACH_NAME like CONCAT(CONCAT('%',#{key,jdbcType=VARCHAR}),'%')
  </select>
  <select id="selectIdAndName"  resultType="map">
    select
    ID id, COACH_NAME coachName
    from dss_coach_info
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultType="map">
    <!--select-->
    <!--<include refid="Base_Column_List" />-->
    <!--from dss_coach_info-->
    select ci.ID id, ci.COACH_IMG coachImg, ci.COACH_NAME coachName, ci.COACH_SEX coachSex, ci.COACH_PHONE coachPhone,
    ci.COACH_IDCAR coachIdcar,ci.COACH_INTRO coachIntro, ci.COACH_YEAR coachYear, ci.TEACH_YEAR teachYear,
    count(li.ID) num
    from dss_coach_info ci
    left join dss_learner_info li on ci.ID = li.COACH_ID
    where ci.ID = #{id,jdbcType=INTEGER}
  </select>
  <select id="countLearnerNum" resultType="map">
    select ci.ID id, ci.COACH_IMG coachImg, ci.COACH_NAME coachName, ci.COACH_SEX coachSex, ci.COACH_PHONE coachPhone,
    ci.COACH_IDCAR coachIdcar,ci.COACH_INTRO coachIntro, ci.COACH_YEAR coachYear, ci.TEACH_YEAR teachYear,
    count(li.ID) num
    from dss_coach_info ci
    left join dss_learner_info li on ci.ID = li.COACH_ID
    group by ci.ID  ORDER BY num DESC LIMIT 5
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from dss_coach_info
    where ID = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteBatchByPrimaryKey" parameterType="java.lang.Integer">
    delete from dss_coach_info
    where ID in
    <foreach collection="list"  item="item" open="(" separator="," close=")"  >
      #{item,jdbcType=INTEGER}
    </foreach>
  </delete>
  <insert id="insert" parameterType="com.bin.design.drivingschool.entity.DssCoachInfo">
    insert into dss_coach_info (ID, COACH_NAME, COACH_SEX, COACH_IDCAR
      COACH_YEAR, COACH_PHONE, COACH_INTRO, 
      COACH_IMG, ORDER_COUNT, TEACH_YEAR)
    values (#{id,jdbcType=INTEGER}, #{coachName,jdbcType=VARCHAR}, #{coachSex,jdbcType=CHAR}, #{coachIdcar,jdbcType=VARCHAR},
      #{coachYear,jdbcType=INTEGER}, #{coachPhone,jdbcType=INTEGER}, #{coachIntro,jdbcType=VARCHAR}, 
      #{coachImg,jdbcType=VARCHAR}, #{orderCount,jdbcType=INTEGER}, #{teachYear,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.bin.design.drivingschool.entity.DssCoachInfo">
    insert into dss_coach_info
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        ID,
      </if>
      <if test="coachName != null">
        COACH_NAME,
      </if>
      <if test="coachSex != null">
        COACH_SEX,
      </if>
      <if test="coachIdcar != null">
        COACH_IDCAR,
      </if>
      <if test="coachYear != null">
        COACH_YEAR,
      </if>
      <if test="coachPhone != null">
        COACH_PHONE,
      </if>
      <if test="coachIntro != null">
        COACH_INTRO,
      </if>
      <if test="coachImg != null">
        COACH_IMG,
      </if>
      <if test="orderCount != null">
        ORDER_COUNT,
      </if>
      <if test="teachYear != null">
        TEACH_YEAR
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="coachName != null">
        #{coachName,jdbcType=VARCHAR},
      </if>
      <if test="coachSex != null">
        #{coachSex,jdbcType=CHAR},
      </if>
      <if test="coachIdcar != null">
        #{coachIdcar,jdbcType=VARCHAR},
      </if>
      <if test="coachYear != null">
        #{coachYear,jdbcType=INTEGER},
      </if>
      <if test="coachPhone != null">
        #{coachPhone,jdbcType=INTEGER},
      </if>
      <if test="coachIntro != null">
        #{coachIntro,jdbcType=VARCHAR},
      </if>
      <if test="coachImg != null">
        #{coachImg,jdbcType=VARCHAR},
      </if>
      <if test="orderCount != null">
        #{orderCount,jdbcType=INTEGER},
      </if>
      <if test="teachYear != null">
        #{teachYear,jdbcType=INTEGER}
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.bin.design.drivingschool.entity.DssCoachInfo">
    update dss_coach_info
    <set>
      <if test="coachName != null">
        COACH_NAME = #{coachName,jdbcType=VARCHAR},
      </if>
      <if test="coachSex != null">
        COACH_SEX = #{coachSex,jdbcType=CHAR},
      </if>
      <if test="coachIdcar != null">
        COACH_IDCAR = #{coachIdcar,jdbcType=VARCHAR},
      </if>
      <if test="coachYear != null">
        COACH_YEAR = #{coachYear,jdbcType=INTEGER},
      </if>
      <if test="coachPhone != null">
        COACH_PHONE = #{coachPhone,jdbcType=INTEGER},
      </if>
      <if test="coachIntro != null">
        COACH_INTRO = #{coachIntro,jdbcType=VARCHAR},
      </if>
      <if test="coachImg != null">
        COACH_IMG = #{coachImg,jdbcType=VARCHAR},
      </if>
      <if test="orderCount != null">
        ORDER_COUNT = #{orderCount,jdbcType=INTEGER},
      </if>
      <if test="teachYear != null">
        TEACH_YEAR = #{teachYear,jdbcType=INTEGER}
      </if>
    </set>
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.bin.design.drivingschool.entity.DssCoachInfo">
    update dss_coach_info
    set COACH_NAME = #{coachName,jdbcType=VARCHAR},
      COACH_SEX = #{coachSex,jdbcType=CHAR},
      COACH_IDCAR = #{coachIdcar,jdbcType=VARCHAR},
      COACH_YEAR = #{coachYear,jdbcType=INTEGER},
      COACH_PHONE = #{coachPhone,jdbcType=INTEGER},
      COACH_INTRO = #{coachIntro,jdbcType=VARCHAR},
      COACH_IMG = #{coachImg,jdbcType=VARCHAR},
      ORDER_COUNT = #{orderCount,jdbcType=INTEGER},
      TEACH_YEAR = #{teachYear,jdbcType=INTEGER}
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <select id="coachForm" resultType="map">
    SELECT  t1.ID id, t1.COACH_NAME coachName, t1.learnerNum, t2.pass, t3.good, t4.medium, t5.bad, t6.complaint
    from
    (((((select a.ID , a.COACH_NAME, count(b.LEARNER_NAME) learnerNum
    from dss_coach_info a
    left join dss_learner_info b on a.ID = b.COACH_ID
    and b.CREATE_TIME BETWEEN #{beginTime,jdbcType=TIMESTAMP} AND #{endTime,jdbcType=TIMESTAMP}
    GROUP BY a.COACH_NAME) AS t1
    JOIN
    (select a.ID ,a.COACH_NAME, count(b.LEARNER_NAME) pass
    from dss_coach_info a
    left join dss_learner_info b on a.ID = b.COACH_ID
    and b.PROCESSING = 0 and b.CREATE_TIME BETWEEN #{beginTime,jdbcType=TIMESTAMP} AND #{endTime,jdbcType=TIMESTAMP}
    GROUP BY a.COACH_NAME) as t2
    on t1.ID=t2.ID )
    JOIN
    (select a.ID, a.COACH_NAME, count(b.TYPE) good from dss_coach_info a
    left join dss_evaluate b on a.ID = b.COACH_ID
    and b.TYPE =1 and b.CREATE_TIME BETWEEN #{beginTime,jdbcType=TIMESTAMP} AND #{endTime,jdbcType=TIMESTAMP}
    GROUP BY a.COACH_NAME) AS t3
    on t2.ID=t3.ID)
    JOIN
    (select a.ID, a.COACH_NAME, count(b.TYPE) medium from dss_coach_info a
    left join dss_evaluate b on a.ID = b.COACH_ID
    and b.TYPE =2 and b.CREATE_TIME BETWEEN #{beginTime,jdbcType=TIMESTAMP} AND #{endTime,jdbcType=TIMESTAMP}
    GROUP BY a.COACH_NAME) AS t4
    on t3.ID=t4.ID)
    join
    (select a.ID, a.COACH_NAME, count(b.TYPE) bad from dss_coach_info a
    left join dss_evaluate b on a.ID = b.COACH_ID
    and b.TYPE =3 and b.CREATE_TIME BETWEEN #{beginTime,jdbcType=TIMESTAMP} AND #{endTime,jdbcType=TIMESTAMP}
    GROUP BY a.COACH_NAME) AS t5
    on t4.ID=t5.ID)
    join
    (select a.ID, a.COACH_NAME, count(b.TYPE) complaint from dss_coach_info a
    left join dss_evaluate b on a.ID = b.COACH_ID
    and b.TYPE =0 and b.CREATE_TIME BETWEEN #{beginTime,jdbcType=TIMESTAMP} AND #{endTime,jdbcType=TIMESTAMP}
    GROUP BY a.COACH_NAME) AS t6
    on t5.ID = t6.ID
  </select>
</mapper>